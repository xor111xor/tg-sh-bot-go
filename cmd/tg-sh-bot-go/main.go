package main

import (
	"flag"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	"github.com/xor111xor/telegram-shell-bot-go/internal"
	"golang.org/x/net/proxy"
	tb "gopkg.in/telebot.v3"
)

var (
	BotSettings = tb.Settings{}
)

func parseCli() (string, int, string) {
	var token string
	var adminUserId int
	var proxy string
	flag.StringVar(&token, "token", "", "Bot token generated by BotFather")
	flag.IntVar(&adminUserId, "uid", 0, "Your telegram user id. Only enabled users can use this bot.")
	flag.StringVar(&proxy, "proxy", "", "Proxy(Socks5)")
	flag.Parse()
	return token, adminUserId, proxy
}

func init() {
	token, adminUserId, socks5 := parseCli()
	var err error
	if len(token) == 0 {
		token = os.Getenv("TELEGRAM_TOKEN")
	}
	if len(socks5) == 0 {
		socks5 = os.Getenv("PROXY_SOCKS5")
	}
	if adminUserId == 0 {
		adminUserId, err = strconv.Atoi(os.Getenv("ADMIN_USER_ID"))
		if err != nil {
			panic(err)
		}
	}

	poller := &tb.LongPoller{Timeout: 10 * time.Second}
	restricted := tb.NewMiddlewarePoller(poller, func(upd *tb.Update) bool {
		if upd.Message.Sender.ID != int64(adminUserId) {
			log.Printf("Unauthorized access denied for %d.\n", upd.Message.Sender.ID)
			return false
		}
		return true
	})

	BotSettings = tb.Settings{
		Token:  token,
		Poller: restricted,
	}

	if socks5 != "" {
		log.Printf("Bot with proxy: %s\n", socks5)

		dialer, err := proxy.SOCKS5("tcp", socks5, nil, proxy.Direct)
		if err != nil {
			log.Fatal("Error creating dialer, aborting.")
		}

		httpTransport := &http.Transport{}
		httpClient := &http.Client{Transport: httpTransport}
		httpTransport.Dial = dialer.Dial
		BotSettings.Client = httpClient

	} else {
		log.Printf("Bot with no proxy.\n")
	}
}

func main() {
	err := internal.RunHandlers(BotSettings)
	if err != nil {
		log.Fatal(err)
	}
}
